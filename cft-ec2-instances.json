{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "EC2 Instances in 2 AZ, with custom security group, app load balancer, and previously generated keypair(VPC id is still hardcoded)",
   "Mappings" : {
        "RegionMap" : {
          "us-east-1" : { "AMI" : "ami-035be7bafff33b6b6"}
        }
    },   

    "Parameters" : {
      "VPCIdParameter" : {
        "Type" : "String",
        "Default" : "vpc-7547d30e",
        "Description" : "Enter the VPC id. Example: vpc-7547d30e"
      },
      "InboundAllowedCIDRParameter" : {
        "Type" : "String",
        "Default" : "73.210.107.0/24",
        "Description" : "Enter the CIDR/ip to allow inbound access to. Example: 73.210.107.0/24 or 73.210.107.5/32, etc"
      },
      "AvailabilityZoneTypeParameter1" : {
        "Type" : "String",
        "Default" : "a",
        "AllowedValues" : ["a", "b", "c", "d", "e", "f"],
        "Description" : "Enter the letter corresponding to availability zone. Example for us-east-1a, enter 'a' "
      },
      "AvailabilityZoneTypeParameter2" : {
        "Type" : "String",
        "Default" : "b",
        "AllowedValues" : ["a", "b", "c", "d", "e", "f"],
        "Description" : "Enter the letter corresponding to availability zone. Example for us-east-1a, enter 'a' "
      },
      "SubnetParameter1" : {
        "Type" : "String",
        "Default" : "subnet-c97e47e6",
        "Description" : "subnet id corresponding to availability zone 'a'. "
      },
      "SubnetParameter2" : {
        "Type" : "String",
        "Default" : "subnet-c8dc1f82",
        "Description" : "subnet id corresponding to availability zone 'b'. "
      }

    },       
   "Resources" : {
     "NSSecurityGroup" : {
         "Type" : "AWS::EC2::SecurityGroup",
         "Properties" : {
            "GroupDescription" : "Allow All/SSH from my computer",
            "VpcId" : { "Ref" : "VPCIdParameter" },
            "SecurityGroupIngress" : [
               {
                  "IpProtocol" : "tcp",
                  "FromPort" : "0",
                  "ToPort" : "65535",               
                  "CidrIp" : { "Ref" : "InboundAllowedCIDRParameter" }
               }
            ],
            "SecurityGroupEgress" : [{
               "IpProtocol" : "-1",
               "CidrIp" : "0.0.0.0/0"
            }]
         }
      },
      "SecurityGroupAcccessWithin": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "NSSecurityGroup",
         "Properties": {
           "GroupId": { "Ref": "NSSecurityGroup" },
           "IpProtocol": "-1",
           "SourceSecurityGroupId": { "Ref": "NSSecurityGroup" }
         }
      },      
      "ec2Instance1" : {
         "Type" : "AWS::EC2::Instance",
         "Properties" : {
            "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
            "InstanceType" : "t2.micro",
            "KeyName" : "admin_key_pair",
            "SecurityGroupIds" : [ { "Ref" : "NSSecurityGroup" } ],
            "AvailabilityZone" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::Region" }, { "Ref" : "AvailabilityZoneTypeParameter1" } ] ] } 
         }
      },
      "ec2Instance2" : {
         "Type" : "AWS::EC2::Instance",
         "Properties" : {
            "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
            "InstanceType" : "t2.micro",
            "KeyName" : "admin_key_pair",
            "SecurityGroupIds" : [ { "Ref" : "NSSecurityGroup" } ],
            "AvailabilityZone" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::Region" }, { "Ref" : "AvailabilityZoneTypeParameter2" } ] ] } 
         }
      },
      
      "appLoadbalancer" : {
        "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties" : {
          "SecurityGroups" : [ { "Ref": "NSSecurityGroup" } ],
          "Subnets" : [ { "Ref" : "SubnetParameter1" }, { "Ref" : "SubnetParameter2" }  ],
          "Tags" : [ { "Key" : "project", "Value" : "ns" } ]
        }
     },
     "appTargetGroup" : {
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
          "Name" : "targetGroup1-main",
          "Port" : 80,
          "Protocol" : "HTTP",
          "Targets": [
              { "Id": {"Ref" : "ec2Instance1"}, "Port": 80 },
              { "Id": {"Ref" : "ec2Instance2"}, "Port": 80 }
          ],          
          "Tags" : [ { "Key" : "project", "Value" : "ns" }],
          "VpcId" : { "Ref" : "VPCIdParameter" }
        }
     },
     "appListener" : {
        "Type" : "AWS::ElasticLoadBalancingV2::Listener",
        "Properties" : {
          "DefaultActions" : [ { "Type": "forward", "TargetGroupArn": { "Ref": "appTargetGroup" }  }],
          "LoadBalancerArn" : { "Ref": "appLoadbalancer" },
          "Port" : 80,
          "Protocol" : "HTTP"
        }
     }

   }
}     