AWSTemplateFormatVersion: 2010-09-09
Description: 'Network setup'
############################################################################################################
# usage:-
# aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE ROLLBACK_COMPLETE --query StackSummaries[*].StackName 
# aws cloudformation create-stack --stack-name ns-network-stack --template-body file://cft-vpc.yml 
# aws cloudformation wait stack-create-complete --stack-name ns-network-stack
# aws cloudformation delete-stack  --stack-name ns-network-stack
# aws cloudformation wait stack-delete-complete --stack-name ns-network-stack
# ---------------------------------------------------------------------------------------------
# Creates a VPC
#  - with public and private subnets
#  - creates an internet gateway
#  - public subnets are associated with public route table, which includes a route to internet gateway(IGW)
#  - private subnets are associated with private route table and private NACL 
#  - creates a NAT gateway which is associated with one of the public subnets (ie connects to IGW)
#    - private route table gets a route to NAT Gateway  
#  - You can ssh into any instance subnet (even from one subnet to another using public or private ip address)
#  - NAT Gateway Setup
#    - Requires a public ip address and should be in a public subnet (ie with Internet Gateway)
#    - In our case the NAT Gateway is in public subnet 1a and shared/used by private subnets 1c-1f
#  - Testing: when creating instances, security-groups with correct permissions will be needed as well
#    - curl http://checkip.amazonaws.com/
#    - sudo yum install -y httpd
#    - sudo yum update -y
############################################################################################################

Resources:
  ########################
  # VPC
  ########################
  nsVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.1.0.0/20
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ns-vpc-cft  

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref nsVPC
      AmazonProvidedIpv6CidrBlock: true

  ########################
  # Internet Gateway
  ########################
  nsInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: ns-cft-igw

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
         Ref: nsVPC
      InternetGatewayId:
         Ref: nsInternetGateway        

  ########################
  # Network ACLs       
  ########################
  # Public NACL not needed since 
  # it's same as default i.e. allow all
  privateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId:
         Ref: nsVPC
       Tags:
       - Key: Name
         Value: ns-cft-private

  # allow all traffic from within the vpc network~
  # default - deny all is already in effect
  # privateNetworkAclEntryInboundAllowWithinVPC:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #      NetworkAclId:
  #         Ref: privateNetworkAcl
  #      RuleNumber: '100'
  #      Protocol: "-1"
  #      RuleAction: allow
  #      Egress: 'false'
  #      CidrBlock: 10.1.0.0/20

  # All ICMP from within VPC network
  privateNetworkAclEntryInboundAllowICMP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: privateNetworkAcl
       RuleNumber: '105'
       Protocol: "1"
       RuleAction: allow
       Egress: 'false'
       CidrBlock: 10.1.0.0/20
       Icmp:
          Code: "-1"
          Type: "-1"       
       # PortRange:
       #      From: '22'
       #      To: '22'       

  # All SSH from within VPC network
  privateNetworkAclEntryInboundAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: privateNetworkAcl
       RuleNumber: '106'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'
       CidrBlock: 10.1.0.0/20
       PortRange:
            From: '22'
            To: '22'       

  # Allow all inbound TCP ephemeral ports
  # required for curl and yum ie http/https responses
  privateNetworkAclEntryInboundAllowTCPEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: privateNetworkAcl
       RuleNumber: '110'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'
       CidrBlock: 0.0.0.0/0
       PortRange:
            From: '1024'
            To: '65535'

  # allow all outbound
  privateNetworkAclEntryOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
          Ref: privateNetworkAcl
       RuleNumber: '110'
       Protocol: "-1"
       RuleAction: allow
       Egress: 'true'
       CidrBlock: 0.0.0.0/0

  ########################
  # Routing Tables      
  ########################
  # will create 2 route tables
  # in addition to main route table
  routeTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: nsVPC
      Tags:
      - Key: Name
        Value: ns-cft-public        

  # Route to Internet Gateway
  # creates a default route(any unmatched ip) to IGW
  routePublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref routeTablePublic
      GatewayId: !Ref nsInternetGateway

  # Private Route Table
  routeTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: nsVPC
      Tags:
      - Key: Name
        Value: ns-cft-private

  ########################
  # Subnets       
  ########################
  # 2 Public Subnets - 1a and 1b
  #  - associated with public route table (and defaut NACL which is public)
  # Remaining 4 are private

  # PUBLIC
  Subnet1a:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      #AssignIpv6AddressOnCreation: 'false'
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.1.1.0/24
      #Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'nsVPC.Ipv6CidrBlocks'], 256, 64]]
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ns-cft-1a

  Subnet1b:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      AvailabilityZone: "us-east-1b"
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: ns-cft-1b

  # PRIVATE
  Subnet1c:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      AvailabilityZone: "us-east-1c"
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: ns-cft-1c
  Subnet1d:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      AvailabilityZone: "us-east-1d"
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: ns-cft-1d
  Subnet1e:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      AvailabilityZone: "us-east-1e"
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: ns-cft-1e
  Subnet1f:    
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId:
        Ref: nsVPC
      AvailabilityZone: "us-east-1f"
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: ns-cft-1f

  # Associate Subnets with Route Tables

  # subnet-1a-b associate with public route table
  publicSubnetRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref Subnet1a

  publicSubnetRouteTableAssociation1b:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePublic
      SubnetId: !Ref Subnet1b

  # subnet-1c-f associate with private route table
  privateSubnetRouteTableAssociation1c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePrivate
      SubnetId: !Ref Subnet1c

  privateSubnetRouteTableAssociation1d:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePrivate
      SubnetId: !Ref Subnet1d

  privateSubnetRouteTableAssociation1e:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePrivate
      SubnetId: !Ref Subnet1e

  privateSubnetRouteTableAssociation1f:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref routeTablePrivate
      SubnetId: !Ref Subnet1f

  # Associate private subnets with NACL 
  privateSubnetNACLAssociation1c:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref privateNetworkAcl
      SubnetId: !Ref Subnet1c

  privateSubnetNACLAssociation1d:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref privateNetworkAcl
      SubnetId: !Ref Subnet1d

  privateSubnetNACLAssociation1e:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref privateNetworkAcl
      SubnetId: !Ref Subnet1e

  privateSubnetNACLAssociation1f:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref privateNetworkAcl
      SubnetId: !Ref Subnet1f

  ########################
  # NAT Gateway 
  # - charged
  ########################  

  # create a NAT Gateway and associate with
  # a public subnet and an Elastic IP
  nsNATGateway:
     Type: AWS::EC2::NatGateway
     Properties:
        AllocationId:
           Fn::GetAtt:
           - NATElasticIP
           - AllocationId
        SubnetId:
           Ref: Subnet1a
        Tags:
        - Key: Name
          Value: ns-cft-NAT

  NATElasticIP:
     Type: AWS::EC2::EIP
     Properties:
        Domain: nsVPC

  # AttachVpnGateway:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     VpcId:
  #        Ref: nsVPC
  #     VpnGatewayId:
  #        Ref: nsNATGateway  

  # Add a route to the private route table
  # to forward all default traffic to NAT gateway
  Route:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId:
           Ref: routeTablePrivate
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
           Ref: nsNATGateway  